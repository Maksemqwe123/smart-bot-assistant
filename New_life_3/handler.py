from weather_tg_bot import *

from New_life_3.config import *

from New_life_3.weatear import ru

from buttons import *

from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State

import asyncio

import logging

from aiogram.dispatcher import FSMContext

from geopy.geocoders import Nominatim

from parsers.parser_location_address import *

from parsers.parser_pizza import *
from New_life_3.parsers.parser_kinogo import *
from New_life_3.parsers.parser_litres import all_books
from New_life_3.parsers.cook_parser import all_cooks
from New_life_3.parsers.parser_restaurant_pizza import *
from New_life_3.parsers.parser_coffee import *
from New_life_3.parsers.parser_cinema import *

from sqlite import Database

import aioschedule

import requests
import random

logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
)

db = Database('new_database')

number = random.randint(1, 20)
count_of_attempts = 1

locations_latitude_and_longitude = []
location_no_duplicates = []
locations_latitude_and_longitude_cinema = []
location_no_duplicates_cinema = []
locations_latitude_and_longitude_restaurant = []
location_no_duplicates_restaurant = []

real_location_coffee = []
real_location_cinema = []
real_location_restaurant = []
location_city_name = []


async def start_message(message: types.Message):
    welcome = message.from_user.full_name
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç {welcome}, —è –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Å–∫–∞–∂–µ—Ç –∫–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å, –≤ —Å–≤—è–∑–∏ —Å –ø–æ–≥–æ–¥–æ–πüå§',
                         reply_markup=user_kb)
    await message.answer('–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É?üå§')
    if message.chat.type == 'private':
        db.create_table()
        if not db.create_profile(message.from_user.id):
            db.edit_profile(message.from_user.id, welcome)
            logging.info('–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–¥')
        else:
            logging.info('–ù–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–¥ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ')


async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ‚ùå', reply_markup=house_or_street)


async def send_all(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id == ADMIN_ID:
            text = message.text[9:]
            users_id = db.get_users()
            for row in users_id:
                try:
                    await bot.send_message(row[0], text)

                except:
                    db.set_active(row[0], 0)

            await bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")


async def today(message: types.Message):
    try:
        r = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={OPEN_WEATHER_TOKEN}&units=metric&lang={ru}"
        )
        data = r.json()

        city = data["name"]
        cur_weather = data["main"]["temp"]
        weather_description = data["weather"][0]["description"]
        wind = data["wind"]["speed"]

        await message.answer(
            f'–í –≥–æ—Ä–æ–¥–µ: {city} \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: {cur_weather} C \n–û–∂–∏–¥–∞–µ—Ç—Å—è: {weather_description}\n'
            f'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind} –º/c', reply_markup=house_or_street)

        if 10 < cur_weather < 5:
            await message.answer('C–µ–≥–æ–¥–Ω—è –Ω–∞ —É–ª–∏—Ü–µ –¥–æ–≤–æ–ª—å–Ω–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞‚òÄÔ∏è‚òîÔ∏èüèä‚Äç‚ôÇÔ∏è, '
                                 '–≤–æ–∑–º–æ–∂–Ω—ã –ø–µ—Ä–µ–ø–∞–¥—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ãü•∂ü•µ, –º–æ–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –¥–æ–º–∞üë®‚Äçüíª –∏–ª–∏ –ø–æ–π—Ç–∏ –Ω–∞ —É–ª–∏—Ü—Éüö∂‚Äç‚ôÇüö∂‚Äç‚ôÄ')

        if 5 > cur_weather > -4:
            await message.answer('c–µ–≥–æ–¥–Ω—è –Ω–∞ —É–ª–∏—Ü–µ –Ω–µ–º–Ω–æ–≥–æ —Ö–æ–ª–æ–¥–Ω–æ‚ùÑÔ∏è, –≤–æ–∑–º–æ–∂–Ω–æ —Å–ª—è–∫–æ—Ç—å –∏ –≥–æ–ª–æ–ª—ë–¥üèä‚Äç‚ôÇÔ∏è‚õ∏,'
                                 '–º–æ–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –¥–æ–º–∞üë®‚Äçüíª –∏–ª–∏ –ø–æ–π—Ç–∏ –Ω–∞ —É–ª–∏—Ü—Éüö∂‚Äç‚ôÇüö∂‚Äç‚ôÄ')

        elif -4 > cur_weather > -9:
            await message.answer(
                '—Å–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ —Ö–æ–ª–æ–¥–Ω–æ‚ùÑÔ∏è, –æ–¥–µ–Ω—å—Å—è –ø–æ—Ç–µ–ø–ª–µ–µüß§, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –µ—â—ë –ø–æ–µ—Å—Ç—å –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–ºüçúüç≥')

        elif -9 > cur_weather > -16:
            await message.answer('—Å–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ –¥–æ–≤–æ–ª—å–Ω–æ —Ö–æ–ª–æ–¥–Ω–æü•∂, –ø–æ—Å–æ–≤–µ—Ç—É—é —Ç–µ–±–µ –æ—Å—Ç–∞—Ç—å—Å—è –¥–æ–º–∞üë®‚Äçüíª,'
                                 '–Ω–æ –µ—Å–ª–∏ —Ç–µ–±–µ –Ω–µ —Å—Ç—Ä–∞—à–µ–Ω —Ö–æ–ª–æ–¥, –º–æ–≥—É –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∫—É–¥–∞ –º–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—åüö∂‚Äç‚ôÇüö∂‚Äç‚ôÄ')

        elif cur_weather < -16:
            await message.answer('c–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ –æ—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æü•∂‚ò†Ô∏è, –æ—Å—Ç–∞–Ω—å—Å—è –ª—É—á—à–µ –¥–æ–º–∞üë®‚Äçüíª')

    except:
        await message.reply("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")


async def leisure(message: types.Message):
    await message.answer(
        '–º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–ø–æ—á–∏—Ç–∞—Ç—å —Ñ–∏–ª—å–º/–∫–Ω–∏–≥—É, –Ω–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º,üé¨üìö —è –±—ã –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞–ª –∑–∞–≤–∞—Ä–∏—Ç—å —á–∞—è/–∫–æ—Ñ–µ.‚òï\n'
        '–º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –∫–∞–∫ –ª–µ–≥–∫–æ –∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –≤–∫—É—Å–Ω—ã–π –¥–µ—Å–µ—Ä—Ç,üßÅ'
        '—Ç–∞–∫ –∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∞–∫—Ü–∏—è –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –ø–∏—Ü—Ü—ãüçï', reply_markup=help_assistant_house)


class DataFilms(StatesGroup):
    Film_cimema = State()


async def street(message: types.Message):
    await DataFilms.Film_cimema.set()

    await message.answer('–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—èüé¨‚òïüçï', reply_markup=user_leisure)


async def leisure_city(message: types.Message, state: FSMContext):
    leisure_city_people = message.text
    location_city_name.append(leisure_city_people)
    await message.answer('–ú–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å –≤ –∫–∏–Ω–æ/—Ç–µ–∞—Ç—Ä,üé•üé≠ –º–æ–∂–Ω–æ –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –∫–∞—Ç–∞—è—Å—å –Ω–∞ –∫–æ–Ω—å–∫–∞—Ö.‚õ∏Ô∏è'
                         '–í —Ö–æ–ª–æ–¥–Ω—É—é –ø–æ–≥–æ–¥—É –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –≤—ã–ø–∏—Ç—å –∫–æ—Ñ–µ/—á–∞—è.‚òïüçµ –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º—É –ø–∞—Ä–∫—É,üåÖ'
                         '–∞ –≤ –∫–æ–Ω—Ü–µ –≤–µ—á–µ—Ä–∞ –º–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å –ø–æ–∫—É—à–∞—Ç—å –ø–∏—Ü—Ü—ãüçï', reply_markup=help_assistant_street)

    await state.finish()


async def back_weather(message: types.Message):
    await message.answer('–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –æ–∂–∏–¥–∞–µ—Ç—Å—è...', reply_markup=user_kb)


class DataGame(StatesGroup):
    Offer_game = State()


async def game(message: types.Message):
    global count_of_attempts, number

    if count_of_attempts == 1:
        await message.answer(f'–û—Ç–≥–∞–¥–∞–π —á–∏—Å–ª–æ \n—è –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20, –ø–æ–ø—Ä–æ–±—É–π –µ–≥–æ —É–≥–∞–¥–∞—Ç—åüòâ', reply_markup=menu)
    else:
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æüßê')

    await DataGame.Offer_game.set()


async def back(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('—Å–µ–∫—É–Ω–¥—É‚è±', reply_markup=house_or_street)


@dp.callback_query_handler(text='back_call')
async def back_call(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.send_message(callback_query.from_user.id, '—Å–µ–∫—É–Ω–¥—É‚è±', reply_markup=house_or_street)


async def back_street(message: types.Message):
    await message.answer('–°–µ–π—á–∞—Å –ø–æ–¥—Å–∫–∞–∂—É', reply_markup=help_assistant_street)


async def back_house(message: types.Message):
    await message.answer('–°–µ–π—á–∞—Å –ø–æ–¥—Å–∫–∞–∂—É', reply_markup=help_assistant_house)


async def pizza(message: types.Message):
    for sort_parser_pizza in all_parser_pizza[1:4]:
        await message.answer(sort_parser_pizza[0])


async def kinogo(message: types.Message):
    for sort_kinogo_no_duplicates in kinogo_no_duplicates[1:4]:
        await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {sort_kinogo_no_duplicates[0]} \nC—Å—ã–ª–∫–∞: {sort_kinogo_no_duplicates[-1]}')
    await message.answer('–•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–æ–ª—å—à–µ —Ñ–∏–ª—å–º–æ–≤ –∏ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π –ª—é–±–∏–º—ã–π –∂–∞–Ω—Ä‚ùì'
                         '\n–£ –Ω–∞—Å –µ—Å—Ç—å –±–æ—Ç "I love you kinogo" –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å '
                         '–≤—ã–±–æ—Ä–æ–º —Ñ–∏–ª—å–º–∞üçøüé¨', reply_markup=bot_films)


async def book(message: types.Message):
    for sort_all_books in all_books[1:4]:
        await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ:{sort_all_books[0]} \nCc—ã–ª–∫–∞: {sort_all_books[-1]}\n')


async def cook(message: types.Message):
    for sort_all_cooks in all_cooks[1:4]:
        await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {sort_all_cooks[0]} \nCc—ã–ª–∫–∞: {sort_all_cooks[-1]}\n')


class DataCinema(StatesGroup):
    Loc_cinema = State()


async def cinema(message: types.Message):
    parser_cinema = ParserGenre(location_city_name)
    all_cinema = list(zip(items_genre, urls_genre))
    for sort_all_cinema in all_cinema[1:4]:
        await message.answer(
            f'–ù–∞–∑–≤–∞–Ω–∏–µ: {sort_all_cinema[0]} \nCc—ã–ª–∫–∞: {sort_all_cinema[1]}', reply_markup=types.ReplyKeyboardRemove()
        )
    await message.answer(f'–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è‚ùó \n–ú–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ –±–ª–∏–∂–∞–π—à–µ–π –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–µ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ–∑–ª–µ —Ç–µ–±—èüß≠'
                         f' \n–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µüì±',
                         reply_markup=me_location)

    db.create_table()

    await DataCinema.Loc_cinema.set()


async def location_cinema(message: types.Message, state: FSMContext):
    geolocator_cinema = Nominatim(user_agent="Cinema")
    for sort_loc_address_cinema in loc_address_cinema:
        geolocation_cinema = geolocator_cinema.geocode(sort_loc_address_cinema, timeout=10)
        if geolocation_cinema is None:
            locations_latitude_and_longitude_cinema.append(None)
        else:
            locations_cinema = geolocation_cinema.latitude, geolocation_cinema.longitude

            locations_latitude_and_longitude_cinema.append(locations_cinema)

    geolocation_no_duplicates_cinema = list(set(locations_latitude_and_longitude_cinema))
    loc_geo_cinema = list(filter(None, geolocation_no_duplicates_cinema))

    if message.location is not None:
        geolocation_me_cinema = (message.location.latitude, message.location.longitude)
        for add_location_db in geolocation_me_cinema:
            real_location_cinema.append(add_location_db)

        ab_cinema = loc_geo_cinema[:]
        ab_cinema.append(geolocation_me_cinema)
        ab_cinema.sort()

        db.update_location(latitude=real_location_cinema[0], longitude=real_location_cinema[1], user_id=message.from_user.id)
        logging.info('–í –±–¥ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ')

        ab_index_cinema = ab_cinema.index(geolocation_me_cinema) - 1 if ab_cinema.index(
            geolocation_me_cinema) > 0 else 1
        spend_cinema = (ab_cinema[ab_index_cinema])

        await bot.send_location(message.chat.id, spend_cinema[0], spend_cinema[1], reply_markup=help_assistant_street)

        nom = Nominatim(user_agent='Location_cinema')
        location_address = nom.reverse(spend_cinema)
        await message.answer(f'–ù–∞—Ö–æ–¥–∏—Ç—Å—è: {location_address}')

        async with state.proxy() as data:
            data["answer1"] = location_address

        await state.finish()


class DataRestaurant(StatesGroup):
    Loc_restaurant = State()


async def restaurant(message: types.Message):
    parser_cinema = ParserRestaurant(location_city_name)
    all_pizza = list(zip(items_restaurant, urls_restaurant, address_restaurant))
    for sort_all_pizza in all_pizza[1:4]:
        await message.answer(
            f'–ù–∞–∑–≤–∞–Ω–∏–µ: {sort_all_pizza[0]} \nCc—ã–ª–∫–∞: {sort_all_pizza[1]}'
            f'\n–ù–∞—Ö–æ–¥–∏—Ç—Å—è: {sort_all_pizza[2]} ', reply_markup=types.ReplyKeyboardRemove())

    await message.answer(f'–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è‚ùó \n–ú–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ –±–ª–∏–∂–∞–π—à–µ–π –∫–æ—Ñ–µ–π–Ω–∏ –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ–∑–ª–µ —Ç–µ–±—èüß≠'
                         f' \n–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µüì±',
                         reply_markup=me_location)
    db.create_table()

    await DataRestaurant.Loc_restaurant.set()


async def location_restaurant(message: types.Message, state: FSMContext):
    geolocator_restaurant = Nominatim(user_agent="Restaurant")
    for restaurant_city in address_restaurant:
        geolocation_restaurant = geolocator_restaurant.geocode(restaurant_city, timeout=10)
        if geolocation_restaurant is None:
            locations_latitude_and_longitude_restaurant.append(None)
        else:
            locations_restaurant = geolocation_restaurant.latitude, geolocation_restaurant.longitude

            locations_latitude_and_longitude_restaurant.append(locations_restaurant)

    geolocation_no_duplicates_restaurant = list(set(locations_latitude_and_longitude_restaurant))
    loc_geo_restaurant = list(filter(None, geolocation_no_duplicates_restaurant))

    if message.location is not None:
        geolocation_me_restaurant = (message.location.latitude, message.location.longitude)
        for add_location_db in geolocation_me_restaurant:
            real_location_restaurant.append(add_location_db)

        ab_restaurant = loc_geo_restaurant[:]
        ab_restaurant.append(geolocation_me_restaurant)
        ab_restaurant.sort()

        db.update_location(latitude=real_location_restaurant[0], longitude=real_location_restaurant[1], user_id=message.from_user.id)
        logging.info('–í –±–¥ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ')

        ab_index_restaurant = ab_restaurant.index(geolocation_me_restaurant) - 1 if ab_restaurant.index(
            geolocation_me_restaurant) > 0 else 1

        spend_restaurant = (ab_restaurant[ab_index_restaurant])
        await bot.send_location(message.chat.id, spend_restaurant[0], spend_restaurant[1],
                                reply_markup=help_assistant_street)

        nom = Nominatim(user_agent='Restaurant')
        location_address_restaurant = nom.reverse(spend_restaurant)
        await message.answer(f'–ù–∞—Ö–æ–¥–∏—Ç—Å—è: {location_address_restaurant}')

        async with state.proxy() as data:
            data["answer3"] = location_address_restaurant

        await state.finish()


class DataCoffee(StatesGroup):
    Loc_coffee = State()


async def coffee(message: types.Message):
    parser_cinema = ParserCoffee(location_city_name)
    all_coffee = list(zip(items_coffee, urls_coffee, address_coffee))
    for sort_all_coffee in all_coffee[1:4]:
        await message.answer(
            f'–ù–∞–∑–≤–∞–Ω–∏–µ: {sort_all_coffee[0]} \nCc—ã–ª–∫–∞: {sort_all_coffee[1]} '
            f'\n–ê–¥—Ä–µ—Å: {sort_all_coffee[2]}', reply_markup=types.ReplyKeyboardRemove())
    await message.answer(f'–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è‚ùó \n–ú–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ –±–ª–∏–∂–∞–π—à–µ–π –∫–æ—Ñ–µ–π–Ω–∏ –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ–∑–ª–µ —Ç–µ–±—èüß≠'
                         f' \n–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µüì±',
                         reply_markup=me_location)
    db.create_table()

    await DataCoffee.Loc_coffee.set()


async def location_coffee(message: types.Message, state: FSMContext):
    geolocator = Nominatim(user_agent="Location_coffee")
    for coffee_city in address_coffee:
        geolocation_coffee = geolocator.geocode(coffee_city, timeout=10)
        if geolocation_coffee is None:
            locations_latitude_and_longitude.append(None)
        else:
            locations = geolocation_coffee.latitude, geolocation_coffee.longitude

            locations_latitude_and_longitude.append(locations)

    geolocation_no_duplicates = list(set(locations_latitude_and_longitude))
    loc_geo = list(filter(None, geolocation_no_duplicates))

    if message.location is not None:
        geolocation_me = (message.location.latitude, message.location.longitude)
        for add_location_db in geolocation_me:
            real_location_coffee.append(add_location_db)

        db.update_location(latitude=real_location_coffee[0], longitude=real_location_coffee[1], user_id=message.from_user.id)
        logging.info('–í –±–¥ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ')

        ab = loc_geo[:]
        ab.append(geolocation_me)
        ab.sort()
        ab_index = ab.index(geolocation_me) - 1 if ab.index(geolocation_me) > 0 else 1
        spend = (ab[ab_index])
        await bot.send_location(message.chat.id, spend[0], spend[1], reply_markup=help_assistant_street)

        nom = Nominatim(user_agent='Location_coffee')
        location_address = nom.reverse(spend)
        await message.answer(f'–ù–∞—Ö–æ–¥–∏—Ç—Å—è: {location_address}')

        async with state.proxy() as data:
            data["answer2"] = location_address

        await state.finish()


class Other(StatesGroup):
    Other_city = State()


async def other_city(message: types.Message):
    location_city_name.clear()
    items_restaurant.clear()
    urls_restaurant.clear()
    address_restaurant.clear()
    locations_latitude_and_longitude_restaurant.clear()

    items_coffee.clear()
    urls_coffee.clear()
    address_coffee.clear()
    locations_latitude_and_longitude.clear()

    await Other.Other_city.set()

    await message.answer('–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—èüé¨‚òïüçï', reply_markup=user_leisure)


async def new_city(message: types.Message, state: FSMContext):
    new_city_people = message.text
    location_city_name.append(new_city_people)
    await message.answer('–ú–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å –≤ –∫–∏–Ω–æ/—Ç–µ–∞—Ç—Ä,üé•üé≠ –º–æ–∂–Ω–æ –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –∫–∞—Ç–∞—è—Å—å –Ω–∞ –∫–æ–Ω—å–∫–∞—Ö.‚õ∏Ô∏è'
                         '–í —Ö–æ–ª–æ–¥–Ω—É—é –ø–æ–≥–æ–¥—É –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –≤—ã–ø–∏—Ç—å –∫–æ—Ñ–µ/—á–∞—è.‚òïüçµ –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º—É –ø–∞—Ä–∫—É,üåÖ'
                         '–∞ –≤ –∫–æ–Ω—Ü–µ –≤–µ—á–µ—Ä–∞ –º–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å –ø–æ–∫—É—à–∞—Ç—å –ø–∏—Ü—Ü—ãüçï', reply_markup=help_assistant_street)

    await state.finish()


async def info_game(message: types.Message, state: FSMContext):
    global number, count_of_attempts

    async with state.proxy() as data:
        data["answer2"] = count_of_attempts

    await state.finish()

    try:
        if int(message.text) == number:
            await message.answer(f'–í—ã —É–≥–∞–¥–∞–ª–∏!üéâ\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {count_of_attempts}', reply_markup=house_or_street)
            restart_game = count_of_attempts - 1
            count_of_attempts -= restart_game
            number = random.randint(1, 20)

        elif int(message.text) < number:
            await message.answer(f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑üôÉ \n–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ')
            count_of_attempts += 1
            await game(message)

        else:
            await message.answer(f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑üôÉ \n–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ')
            count_of_attempts += 1
            await game(message)
    except ValueError:
        await message.answer(f'–û—à–∏–±–∫–∞‚ùó\n–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø')
        await game(message)


async def send_reminder():
    all_info = db.all_user_db()
    for all_user in all_info:
        id_user = all_user[0]
        full_name = all_user[2]
        await bot.send_message(chat_id=id_user, text=f'–ü—Ä–∏–≤–µ—Ç {full_name}, —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥—É?üôÉ')


async def scheduler():
    aioschedule.every().day.at("9:30").do(send_reminder)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


async def on_startup(_):
    asyncio.create_task(scheduler())


def register_handlers_commands(dp: Dispatcher):
    dp.register_message_handler(start_message, commands='start', state='*')
    dp.register_message_handler(cmd_cancel, commands='cancel', state='*')
    dp.register_message_handler(send_all, commands='sendall', state='*')


def register_handlers_weather_house_street(dp: Dispatcher):
    dp.register_message_handler(today, Text(equals=cities, ignore_case=True))
    dp.register_message_handler(leisure, Text(equals='–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∞—Ç—å –¥–æ–º–∞ ?üè†', ignore_case=True))
    dp.register_message_handler(street, Text(equals='–ö–∞–∫ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –Ω–∞ —É–ª–∏—Ü–µ ?üö∂‚Äç‚ôÇüö∂‚Äç‚ôÄ', ignore_case=True),
                                state=None)
    dp.register_message_handler(leisure_city, state=DataFilms.Film_cimema)


def register_handlers_back_game(dp: Dispatcher):
    dp.register_message_handler(back_weather, Text(equals='–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µüå§', ignore_case=True))
    dp.register_message_handler(game, Text(equals='–°—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ÉüîÆ', ignore_case=True), state=None)
    dp.register_message_handler(info_game, state=DataGame.Offer_game)
    dp.register_message_handler(back, Text(equals='–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìã', ignore_case=True), state='*')
    dp.register_message_handler(back_street, Text(equals='–ö–∞–∫ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –Ω–∞ —É–ª–∏—Ü–µ ?üö∂‚Äç‚ôÇüö∂‚Äç‚ôÄ', ignore_case=True))
    dp.register_message_handler(back_house, Text(equals='–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∞—Ç—å –¥–æ–º–∞ ?üè†', ignore_case=True))


def register_handlers_eats_drinks(dp: Dispatcher):
    dp.register_message_handler(pizza, Text(equals='–ß—Ç–æ –∑–∞ –∞–∫—Ü–∏—è –Ω–∞ –ø–∏—Ü—Ü—É?üçï', ignore_case=True))
    dp.register_message_handler(cook, Text(equals='–ö–∞–∫–æ–π –¥–µ—Å–µ—Ä—Ç –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?üßÅ', ignore_case=True))
    dp.register_message_handler(restaurant, Text(equals='–ö—É–¥–∞ –º–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å –ø–æ–µ—Å—Ç—å ?üçΩ', ignore_case=True), state=None)
    dp.register_message_handler(coffee, Text(equals='–ì–¥–µ –∏ –∫–∞–∫–æ–π –∫–æ—Ñ–µ –º–æ–∂–Ω–æ –≤—ã–ø–∏—Ç—å?‚òïÔ∏è', ignore_case=True), state=None)


def register_handlers_film_book(dp: Dispatcher):
    dp.register_message_handler(kinogo, Text(equals='–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?üé¨', ignore_case=True))
    dp.register_message_handler(book, Text(equals='–ö–∞–∫—É—é –∫–Ω–∏–≥—É –º–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å?üìö', ignore_case=True))
    dp.register_message_handler(cinema, Text(equals='–ù–∞ –∫–∞–∫–æ–π —Ñ–∏–ª—å–º –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä –º–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å ?üé¨', ignore_case=True),
                                state=None)


def register_handlers_location_new_city(dp: Dispatcher):
    dp.register_message_handler(location_cinema, content_types=["location"], state=DataCinema.Loc_cinema)
    dp.register_message_handler(location_restaurant, content_types=["location"], state=DataRestaurant.Loc_restaurant)
    dp.register_message_handler(location_coffee, content_types=["location"], state=DataCoffee.Loc_coffee)
    dp.register_message_handler(other_city, Text(equals='–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥üèôÔ∏èüåÉ', ignore_case=True), state=None)
    dp.register_message_handler(new_city, state=Other.Other_city)
